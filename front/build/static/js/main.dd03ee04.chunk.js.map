{"version":3,"sources":["components/AppBar.js","components/Dialog.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","btn","textAlign","marginTop","connect","dispatch","useState","open","setOpen","setTitle","text","setText","handleClose","Button","color","onClick","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","onKeyUpCapture","event","target","value","autoFocus","margin","label","type","fullWidth","multiline","rows","DialogActions","payload","width","height","backgroundColor","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","padding","mt","accordionText","icons","state","texts","loading","setLoading","Accord","map","tx","ix","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","getTexts","a","fetch","json","forEach","element","split","slice","join","alert","useEffect","Container","maxWidth","disableGutters","Grid","container","item","xs","align","gutterBottom","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","Object","assign","concat","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd03ee04.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          \n          <Typography variant=\"h6\" className={classes.title}>\n            Front-end Test / Ximdex\n          </Typography>\n          \n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { connect } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    btn: {\n        textAlign: 'center',\n        marginTop: 20\n    }\n}));\n\nfunction FormDialog({dispatch}) {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [title, setTitle] = useState('');\n    const [text, setText] = useState('');\n    \n    const writeText = (event) => {\n        setText(event.target.value)\n    }\n    const writeTitle = (event) => {\n        setTitle(event.target.value)\n    }\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const addText = () => {\n        dispatch({ type: 'ADD_TEXT', payload: { title: title, text: text } })\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.btn}>\n        <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n            Add text\n        </Button>\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Add text</DialogTitle>\n            <DialogContent>\n            <DialogContentText>\n                \\ (•◡•) /\n            </DialogContentText>\n            <TextField\n                onKeyUpCapture={writeTitle}\n                autoFocus\n                margin=\"dense\"\n                id=\"title\"\n                label=\"Title\"\n                type=\"text\"\n                fullWidth\n            />\n            <TextField\n                onKeyUpCapture={writeText}\n                label=\"Text\"\n                multiline\n                margin=\"dense\"\n                fullWidth\n                rows={4}\n                type=\"text\"\n            />\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n                Cancel\n            </Button>\n            <Button onClick={addText} color=\"primary\">\n                Add\n            </Button>\n            </DialogActions>\n        </Dialog>\n        </div>\n    );\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        dispatch\n    }\n}\n  \nexport default connect(mapDispatchToProps)(FormDialog)\n","import React, {useEffect, useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport AppBar from './components/AppBar';\nimport Dialog from './components/Dialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect } from 'react-redux'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100vh\",\n    backgroundColor:'#f1f1f1'\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n    color: 'blue'\n  },\n  fullWidth: {\n    padding: \"0 !important\"\n  },\n  mt: {\n    marginTop: 20\n  },\n  accordionText: {\n    color: 'black'\n  },\n  icons: {\n    color: 'blue'\n  }\n}));\n\nfunction App({texts, dispatch}) {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(true);  \n  \n  const Accord = texts.map((tx, ix) =>\n    <Accordion key={ix}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon className={classes.icons} />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography className={classes.heading}>{tx.title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Typography className={classes.accordionText}>\n          {tx.text}\n        </Typography>\n      </AccordionDetails>\n    </Accordion>\n  );\n  const getTexts = async () => {\n    try {\n      const _txts = await (await fetch('https://baconipsum.com/api/?type=meat-and-filler&paras=2')).json()\n      _txts.forEach((element) => {\n        var title = element.split(' ').slice(0,3).join(' ');\n        dispatch({ type: 'ADD_TEXT', payload: { title: title, text: element } })\n      });\n      setLoading(false);\n    } catch (err) {\n      alert('error fetching data')\n    }\n  };\n  \n  useEffect( () => {    \n     getTexts();\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      \n      <Container maxWidth=\"xl\" disableGutters>\n        <AppBar />\n        <Grid container>\n          <Grid item xs={12} className={classes.mt}>\n            <Typography align=\"center\" variant=\"h6\" gutterBottom>\n              First two items are loaded by an API. More can be added using the button \"ADD TEXT\".\n            </Typography>\n          </Grid>\n        </Grid>\n        <Grid className={classes.mt} container>\n          <Grid item xs={3} />\n          <Grid item xs={6} align={loading ? \"center\": \"left\"}>\n            {\n              loading ? <CircularProgress /> : Accord\n            }\n            <Dialog />\n          </Grid>\n          <Grid item xs={3} />\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\n\nconst mapStateToProps = state => {\n  return { texts: state.texts }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n      dispatch\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore } from 'redux'\n\nconst initialState = {\n    texts: [],\n}\n\nconst reducer = (state = initialState, action) => {\n  if (action.type === 'ADD_TEXT') {\n    return Object.assign({}, state, {\n        texts: state.texts.concat(action.payload)\n    })\n  }\n\n  return state\n}\n\nconst store = createStore(reducer)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {Provider} from 'react-redux';\nimport store from './store/index'\nwindow.store = store\nReactDOM.render(\n  <Provider store={store}>\n     <App/> \n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}